{
    "background": "An office supply company makes two types of printers: color printers and black and white printers.",
    "problem_type": "LP",
    "parameters": [
        {
            "definition": "Maximum number of color printers that can be produced per day",
            "symbol": "MaxColor",
            "value": 20,
            "shape": [],
            "code": "MaxColor = data[\"MaxColor\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of black and white printers that can be produced per day",
            "symbol": "MaxBW",
            "value": 30,
            "shape": [],
            "code": "MaxBW = data[\"MaxBW\"] # scalar parameter"
        },
        {
            "definition": "Maximum number of printers that the paper tray installing machine can equip per day",
            "symbol": "MaxTotal",
            "value": 35,
            "shape": [],
            "code": "MaxTotal = data[\"MaxTotal\"] # scalar parameter"
        },
        {
            "definition": "Profit generated per color printer",
            "symbol": "ProfitColor",
            "value": 200,
            "shape": [],
            "code": "ProfitColor = data[\"ProfitColor\"] # scalar parameter"
        },
        {
            "definition": "Profit generated per black and white printer",
            "symbol": "ProfitBW",
            "value": 70,
            "shape": [],
            "code": "ProfitBW = data[\"ProfitBW\"] # scalar parameter"
        }
    ],
    "constraint": [
        {
            "description": "Number of color printers is an integer",
            "status": "coded",
            "formulation": "0 \\leq \\textup{ColorPrintersProduced} \\leq \\textup{MaxColor}",
            "related_variables": [
                "ColorPrintersProduced"
            ],
            "related_parameters": [
                "MaxColor"
            ],
            "code": "# Change the variable to be integer\nColorPrintersProduced.vtype = gp.GRB.INTEGER\n\n# Add constraints for the number of color printers produced\nmodel.addConstr(0 <= ColorPrintersProduced, name=\"MinColorPrinters\")\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"MaxColorPrinters\")"
        },
        {
            "description": "Number of black and white printers is an integer",
            "status": "coded",
            "formulation": "\\textup{BWPrintersProduced} \\in \\mathbb{Z} \\quad \\textup{and} \\quad 0 \\leq \\textup{BWPrintersProduced} \\leq \\textup{MaxBW}",
            "related_variables": [
                "BWPrintersProduced",
                "BWPrintersProduced"
            ],
            "related_parameters": [
                "MaxBW"
            ],
            "code": "# Change the type of the variable to integer to satisfy the integer constraint\nBWPrintersProduced.vtype = gp.GRB.INTEGER\n\n# Add constraint for the number of black and white printers produced \nmodel.addConstr(0 <= BWPrintersProduced, \"BW_Printers_Produced_Lower_Bound\")\nmodel.addConstr(BWPrintersProduced <= MaxBW, \"BW_Printers_Produced_Upper_Bound\")"
        },
        {
            "description": "Number of color printers is non-negative",
            "status": "coded",
            "formulation": "\\textup{ColorPrintersProduced} \\geq 0",
            "related_variables": [
                "ColorPrintersProduced"
            ],
            "related_parameters": [],
            "code": "# Add constraint for restricting produced color printers to non-negative numbers\nmodel.addConstr(ColorPrintersProduced >= 0, name=\"non_negativity_color_printers\")"
        },
        {
            "description": "Number of black and white printers is non-negative",
            "status": "coded",
            "formulation": "\\textup{BWPrintersProduced} \\geq 0",
            "related_variables": [
                "BWPrintersProduced"
            ],
            "related_parameters": [],
            "code": "# Add non-negativity constraint for number of black and white printers produced\nmodel.addConstr(BWPrintersProduced >= 0, name=\"nonnegative_BWPrinters\")"
        },
        {
            "description": "The company can make at most MaxColor color printers per day",
            "status": "coded",
            "formulation": "\\textup{ColorPrintersProduced} \\leq \\textup{MaxColor}",
            "related_variables": [
                "ColorPrintersProduced"
            ],
            "related_parameters": [
                "MaxColor"
            ],
            "code": "# Add production limit constraint\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"production_limit\")"
        },
        {
            "description": "The company can make at most MaxBW black and white printers per day",
            "status": "coded",
            "formulation": "\\textup{BWPrintersProduced} \\leq \\textup{MaxBW}",
            "related_variables": [
                "BWPrintersProduced"
            ],
            "related_parameters": [
                "MaxBW"
            ],
            "code": "# Add constraint for maximum black and white printers produced per day\nmodel.addConstr(BWPrintersProduced <= MaxBW, name=\"max_BWPrinters\")"
        },
        {
            "description": "The company can make at most a total of MaxTotal printers per day",
            "status": "coded",
            "formulation": "\\textup{ColorPrintersProduced} + \\textup{BWPrintersProduced} \\leq \\textup{MaxTotal}",
            "related_variables": [
                "ColorPrintersProduced",
                "BWPrintersProduced"
            ],
            "related_parameters": [
                "MaxTotal"
            ],
            "code": "# Add a constraint for maximum total number of printers produced per day\nmodel.addConstr(ColorPrintersProduced + BWPrintersProduced <= MaxTotal, name=\"max_total_production\")"
        },
        {
            "description": "The number of color printers produced per day should be less than or equal to the maximum production capacity of color printers.",
            "formulation": "\\textup{ColorPrintersProduced} \\leq \\textup{MaxColor}",
            "status": "coded",
            "related_variables": [
                "ColorPrintersProduced"
            ],
            "related_parameters": [
                "MaxColor"
            ],
            "code": "# Add color printer production capacity constraint\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"color_printer_capacity\")"
        },
        {
            "description": "The number of black and white printers produced per day should be less than or equal to the maximum production capacity of black and white printers.",
            "formulation": "\\textup{BWPrintersProduced} \\leq \\textup{MaxBW}",
            "status": "coded",
            "related_variables": [
                "BWPrintersProduced"
            ],
            "related_parameters": [
                "MaxBW"
            ],
            "code": "# Add black and white printers production capacity constraint\nmodel.addConstr(BWPrintersProduced <= MaxBW, name=\"bw_printers_capacity\")"
        },
        {
            "description": "The total number of printers (color and black-and-white) equipped by the paper tray installing machine per day should be less than or equal to its maximum capacity.",
            "formulation": "\\textup{ColorPrintersProduced} + \\textup{BWPrintersProduced} \\leq \\textup{MaxTotal}",
            "status": "coded",
            "related_variables": [
                "ColorPrintersProduced",
                "BWPrintersProduced"
            ],
            "related_parameters": [
                "MaxTotal"
            ],
            "code": "# Add constraint for maximum number of printers adapted by the machine per day\nmodel.addConstr(ColorPrintersProduced + BWPrintersProduced <= MaxTotal, name=\"max_capacity\")"
        }
    ],
    "variables": [
        {
            "definition": "Number of color printers produced per day",
            "symbol": "ColorPrintersProduced",
            "shape": [],
            "status": "coded",
            "code": "ColorPrintersProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ColorPrintersProduced\")"
        },
        {
            "definition": "Number of black and white printers produced per day",
            "symbol": "BWPrintersProduced",
            "shape": [],
            "status": "coded",
            "code": "BWPrintersProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"BWPrintersProduced\")"
        }
    ],
    "objective": [
        {
            "description": "Maximize the company's profit, which is ProfitColor per color printer plus ProfitBW per black and white printer.",
            "status": "coded",
            "formulation": "\\max_{\\textup{ColorPrintersProduced}, \\textup{BWPrintersProduced}} \\quad \\textup{ProfitColor} \\cdot \\textup{ColorPrintersProduced} + \\textup{ProfitBW} \\cdot \\textup{BWPrintersProduced}",
            "related_variables": [
                "ColorPrintersProduced",
                "BWPrintersProduced",
                "ColorPrintersProduced",
                "BWPrintersProduced"
            ],
            "related_parameters": [
                "ProfitColor",
                "ProfitBW"
            ],
            "code": "# Set objective\nmodel.setObjective(ProfitColor * ColorPrintersProduced + ProfitBW * BWPrintersProduced, gp.GRB.MAXIMIZE)"
        }
    ],
    "solution_status": null,
    "solver_output_status": null,
    "error_message": null,
    "obj_val": null,
    "log_folder": "logs/log_20240601151519_nl4opt_prob_1/",
    "data_json_path": "data/nl4opt/prob_1/data.json"
}
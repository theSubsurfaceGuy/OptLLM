[
    "The problem is solved.",
    {
        "background": "An office supply company makes two types of printers: color printers and black and white printers.",
        "problem_type": "LP",
        "parameters": [
            {
                "definition": "Maximum number of color printers that can be produced per day",
                "symbol": "MaxColor",
                "value": 20,
                "shape": [],
                "code": "MaxColor = data[\"MaxColor\"] # scalar parameter"
            },
            {
                "definition": "Maximum number of black and white printers that can be produced per day",
                "symbol": "MaxBW",
                "value": 30,
                "shape": [],
                "code": "MaxBW = data[\"MaxBW\"] # scalar parameter"
            },
            {
                "definition": "Maximum number of printers that the paper tray installing machine can equip per day",
                "symbol": "MaxTotal",
                "value": 35,
                "shape": [],
                "code": "MaxTotal = data[\"MaxTotal\"] # scalar parameter"
            },
            {
                "definition": "Profit generated per color printer",
                "symbol": "ProfitColor",
                "value": 200,
                "shape": [],
                "code": "ProfitColor = data[\"ProfitColor\"] # scalar parameter"
            },
            {
                "definition": "Profit generated per black and white printer",
                "symbol": "ProfitBW",
                "value": 70,
                "shape": [],
                "code": "ProfitBW = data[\"ProfitBW\"] # scalar parameter"
            }
        ],
        "constraint": [
            {
                "description": "Number of color printers is an integer",
                "status": "coded",
                "formulation": "0 \\leq \\textup{ColorPrintersProduced} \\leq \\textup{MaxColor}",
                "related_variables": [
                    "ColorPrintersProduced"
                ],
                "related_parameters": [
                    "MaxColor"
                ],
                "code": "# Change the variable to be integer\nColorPrintersProduced.vtype = gp.GRB.INTEGER\n\n# Add constraints for the number of color printers produced\nmodel.addConstr(0 <= ColorPrintersProduced, name=\"MinColorPrinters\")\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"MaxColorPrinters\")"
            },
            {
                "description": "Number of black and white printers is an integer",
                "status": "coded",
                "formulation": "\\textup{BlackWhitePrintersProduced} \\geq 0",
                "related_variables": [
                    "BlackWhitePrintersProduced"
                ],
                "related_parameters": [],
                "code": "# No further code is required, as the integer constraint is already included in the variable's definition"
            },
            {
                "description": "Number of color printers is non-negative",
                "status": "coded",
                "formulation": "\\textup{ColorPrintersProduced} \\geq 0",
                "related_variables": [
                    "ColorPrintersProduced"
                ],
                "related_parameters": [],
                "code": "# Add constraint for restricting produced color printers to non-negative numbers\nmodel.addConstr(ColorPrintersProduced >= 0, name=\"non_negativity_color_printers\")"
            },
            {
                "description": "Number of black and white printers is non-negative",
                "status": "coded",
                "formulation": "\\textup{BlackWhitePrintersProduced} \\geq 0",
                "related_variables": [
                    "BlackWhitePrintersProduced"
                ],
                "related_parameters": [],
                "code": "# Add constraint: Number of black and white printers is non-negative\nmodel.addConstr(BlackWhitePrintersProduced >= 0, name=\"non_negative_printers\")"
            },
            {
                "description": "The company can make at most MaxColor color printers per day",
                "status": "coded",
                "formulation": "\\textup{ColorPrintersProduced} \\leq \\textup{MaxColor}",
                "related_variables": [
                    "ColorPrintersProduced"
                ],
                "related_parameters": [
                    "MaxColor"
                ],
                "code": "# Add production limit constraint\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"production_limit\")"
            },
            {
                "description": "The company can make at most MaxBW black and white printers per day",
                "status": "coded",
                "formulation": "\\textup{BlackWhitePrintersProduced} \\leq \\textup{MaxBW}",
                "related_variables": [
                    "BlackWhitePrintersProduced"
                ],
                "related_parameters": [
                    "MaxBW"
                ],
                "code": "# Add Black and White printer production limit constraint\nmodel.addConstr(BlackWhitePrintersProduced <= MaxBW, name=\"BW_printer_production_limit\")"
            },
            {
                "description": "The company can make at most a total of MaxTotal printers per day",
                "status": "coded",
                "formulation": "\\textup{ColorPrintersProduced} + \\textup{BlackWhitePrintersProduced} \\leq \\textup{MaxTotal}",
                "related_variables": [
                    "ColorPrintersProduced",
                    "BlackWhitePrintersProduced"
                ],
                "related_parameters": [
                    "MaxTotal"
                ],
                "code": "# Add constraint for maximum total printers that can be made per day\nmodel.addConstr(ColorPrintersProduced + BlackWhitePrintersProduced <= MaxTotal, name=\"max_total_printers\")"
            },
            {
                "description": "The company can produce up to a certain number of color printers per day",
                "formulation": "\\textup{ColorPrintersProduced} \\leq \\textup{MaxColor}",
                "status": "coded",
                "related_variables": [
                    "ColorPrintersProduced"
                ],
                "related_parameters": [
                    "MaxColor"
                ],
                "code": "# Add constraint for maximum color printers produced per day\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"max_color_printer_production\")"
            },
            {
                "description": "The company can produce up to a certain number of black and white printers per day",
                "formulation": "\\textup{BlackWhitePrintersProduced} \\leq \\textup{MaxBW}",
                "status": "coded",
                "related_variables": [
                    "BlackWhitePrintersProduced"
                ],
                "related_parameters": [
                    "MaxBW"
                ],
                "code": "# Add black and white printer production limit constraint\nmodel.addConstr(BlackWhitePrintersProduced <= MaxBW, name=\"BW_Printer_Production_Limit\")"
            },
            {
                "description": "The total number of printers produced cannot exceed the maximum productive capacity of the paper tray installing machine",
                "formulation": "\\textup{ColorPrintersProduced} + \\textup{BlackWhitePrintersProduced} \\leq \\textup{MaxTotal}",
                "status": "coded",
                "related_variables": [
                    "ColorPrintersProduced",
                    "BlackWhitePrintersProduced"
                ],
                "related_parameters": [
                    "MaxTotal"
                ],
                "code": "# Add constraint for total number of printers produced\nmodel.addConstr(ColorPrintersProduced + BlackWhitePrintersProduced <= MaxTotal, name=\"production_capacity\")"
            }
        ],
        "variables": [
            {
                "definition": "Number of color printers produced per day",
                "symbol": "ColorPrintersProduced",
                "shape": [],
                "status": "coded",
                "code": "ColorPrintersProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ColorPrintersProduced\")"
            },
            {
                "definition": "Number of black and white printers produced per day",
                "symbol": "BlackWhitePrintersProduced",
                "shape": [],
                "type": "int",
                "status": "coded",
                "code": "BlackWhitePrintersProduced = model.addVar(vtype=gp.GRB.INTEGER, name=\"BlackWhitePrintersProduced\")"
            }
        ],
        "objective": [
            {
                "description": "Maximize the company's profit, which is ProfitColor per color printer plus ProfitBW per black and white printer.",
                "status": "coded",
                "formulation": "\\textup{ProfitColor} \\cdot \\textup{ColorPrintersProduced} + \\textup{ProfitBW} \\cdot \\textup{BlackWhitePrintersProduced}",
                "related_variables": [
                    "ColorPrintersProduced",
                    "BlackWhitePrintersProduced"
                ],
                "related_parameters": [
                    "ProfitColor",
                    "ProfitBW"
                ],
                "code": "# Set objective\nmodel.setObjective(ProfitColor * ColorPrintersProduced + ProfitBW * BlackWhitePrintersProduced, gp.GRB.MAXIMIZE)"
            }
        ],
        "solution_status": "solved",
        "solver_output_status": 2,
        "error_message": null,
        "obj_val": 5050.0,
        "log_folder": "logs/log_20240601144337_nl4opt_prob_1/",
        "data_json_path": "data/nl4opt/prob_1/data.json",
        "code": "\nimport json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\n\n # Define model\nmodel = gp.Model('model')\n\nwith open(\"data/nl4opt/prob_1/data.json\", \"r\") as f:\n    data = json.load(f)\n\n\nMaxColor = data[\"MaxColor\"] # scalar parameter\nMaxBW = data[\"MaxBW\"] # scalar parameter\nMaxTotal = data[\"MaxTotal\"] # scalar parameter\nProfitColor = data[\"ProfitColor\"] # scalar parameter\nProfitBW = data[\"ProfitBW\"] # scalar parameter\nColorPrintersProduced = model.addVar(vtype=gp.GRB.CONTINUOUS, name=\"ColorPrintersProduced\")\nBlackWhitePrintersProduced = model.addVar(vtype=gp.GRB.INTEGER, name=\"BlackWhitePrintersProduced\")\n\n# Change the variable to be integer\nColorPrintersProduced.vtype = gp.GRB.INTEGER\n\n# Add constraints for the number of color printers produced\nmodel.addConstr(0 <= ColorPrintersProduced, name=\"MinColorPrinters\")\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"MaxColorPrinters\")\n\n# No further code is required, as the integer constraint is already included in the variable's definition\n\n# Add constraint for restricting produced color printers to non-negative numbers\nmodel.addConstr(ColorPrintersProduced >= 0, name=\"non_negativity_color_printers\")\n\n# Add constraint: Number of black and white printers is non-negative\nmodel.addConstr(BlackWhitePrintersProduced >= 0, name=\"non_negative_printers\")\n\n# Add production limit constraint\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"production_limit\")\n\n# Add Black and White printer production limit constraint\nmodel.addConstr(BlackWhitePrintersProduced <= MaxBW, name=\"BW_printer_production_limit\")\n\n# Add constraint for maximum total printers that can be made per day\nmodel.addConstr(ColorPrintersProduced + BlackWhitePrintersProduced <= MaxTotal, name=\"max_total_printers\")\n\n# Add constraint for maximum color printers produced per day\nmodel.addConstr(ColorPrintersProduced <= MaxColor, name=\"max_color_printer_production\")\n\n# Add black and white printer production limit constraint\nmodel.addConstr(BlackWhitePrintersProduced <= MaxBW, name=\"BW_Printer_Production_Limit\")\n\n# Add constraint for total number of printers produced\nmodel.addConstr(ColorPrintersProduced + BlackWhitePrintersProduced <= MaxTotal, name=\"production_capacity\")\n\n# Set objective\nmodel.setObjective(ProfitColor * ColorPrintersProduced + ProfitBW * BlackWhitePrintersProduced, gp.GRB.MAXIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n\n"
    }
]